syntax = "proto3";

package raftapi;
option go_package = ".;raftapi";

/*
  Basic Types
 */
message Empty {}

message Bool {bool status = 1;}

message Value {int64 value = 1;}

message  LogEntry {
  uint64 term = 1;
  int64 value = 2;
}

message ErrorMsg {
  string source = 1;
  string message = 2;
}

/*
  Management Messages
 */

message WhoAmI {
  string name = 1;
  uint32 port = 2;
  string role = 3;
}

/*
  Raft Protocol Messages
 */
message RequestVoteMessage {
  uint64 term = 1;
  string candidate = 2;
  uint64 logSize = 3;
  uint32 lastLogTerm = 4;
}

message RequestVoteResponse {
  uint64 term = 1;
  bool approved = 2;
}

message AppendEntryRequest {
  uint64 term = 1;
  string leader = 2;
  int64 prevLogId = 3;
  uint64 prevLogTerm = 4;
  LogEntry entry = 5;
}

message AppendEntryResponse {
  uint64 term = 1;
  bool success = 2;
}

message EntryListResponse {
  repeated LogEntry entries = 1;
}

service RaftService {
  // Client API Requests
  rpc Ping(Empty) returns (WhoAmI) {}
  rpc Shutdown(Empty) returns (Bool) {}
  rpc AppendValue(Value) returns (Bool) {}
  rpc ListEntries(Empty) returns (EntryListResponse) {}

  // Raft Protocol Requests
  rpc RequestVote(RequestVoteMessage) returns (RequestVoteResponse) {}
  rpc AppendEntry(AppendEntryRequest) returns (AppendEntryResponse) {}
}
